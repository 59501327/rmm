@Library('jenkins_shared_lib') _

pipeline {
  agent any
  environment {
    BUILD_TYPE = sh(returnStdout: true, script: 'rapids-build-type')
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    ansiColor('xterm')
    disableConcurrentBuilds(abortPrevious: true)
  }
  stages {
    stage("Style Checks") {
      steps {
        sh "env"
      }
    }
    stage("C++ Matrix Build") {
      environment {
        PARALLEL_LEVEL = '4'
      }
      options {
        timeout(time: 30, unit: 'MINUTES', activity: true)
      }
      steps {
        script {
          parallel generateStage("cuda_build", {
            sh "./ci/build_cpp.sh"
          })
        }
      }
    }

    stage("Python Matrix Build") {
      options {
        timeout(time: 30, unit: 'MINUTES', activity: true)
      }
      steps {
        script {
          parallel generateStage("python_build", {
            sh "./ci/build_py.sh"
          })
        }
      }
    }

    stage("PR Test Stage") {
      when { environment name: 'BUILD_TYPE', value: 'pull-request' }
      options {
        timeout(time: 10, unit: 'MINUTES', activity: true)
      }
      steps {
        script {
          parallel generateStage("branch_pr_test",{
            sh "./ci/gpu_test.sh"
          })
        }
      }
    }

    stage("Nightly Test Stage") {
      when { environment name: 'BUILD_TYPE', value: 'nightly' }
      options {
        timeout(time: 10, unit: 'MINUTES', activity: true)
      }
      environment { UPLOAD_PKGS = "true" }
      steps {
        script {
          parallel generateStage("branch_pr_test",{
            sh "./ci/gpu_test.sh"
          })
        }
      }
    }

    stage("Upload Anaconda Packages") {
      when {
        anyOf {
          environment name: 'BUILD_TYPE', value: 'branch'
          environment name: 'BUILD_TYPE', value: 'nightly'
        }
      }

      steps {
        sh "./ci/upload_to_anaconda.sh"
      }
    }
  }
}
