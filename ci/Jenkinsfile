@Library('jenkins_shared_lib') _

pipeline {
  agent any
  environment {
    // Serves to represent in what 'mode' this run is happening.
    // Will be used to determine whether packages should be uploaded (branch&nightly) or not (PRs)
    // Value will be dynamically computed by a utility tool to be included in gpuci-tools
    BUILD_MODE = 'pull-request'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    ansiColor('xterm')
  }
  stages {
    stage("Style Checks") {
      steps {
        sh "env"
      }
    }
    stage("C++ Matrix Build") {
      environment {
        PARALLEL_LEVEL = '4'
      }
      steps {
        script {
          parallel generateStage("cuda_build", {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "aws-s3-gpuci",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
              sh "./ci/build_cpp.sh"
            }
          })
        }
      }
    }

    stage("Python Matrix Build") {
      steps {
        script {
          parallel generateStage("python_build", {
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "aws-s3-gpuci",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
              sh "./ci/build_py.sh"
            }
          })
        }
      }
    }

    stage("PR/Branch Test Stage") {
      when { not { triggeredBy 'TimerTrigger' } }
      steps {
        sh "env"
        echo "${currentBuild.buildCauses}"
        script {
          parallel generateStage("branch_pr_test",{
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "aws-s3-gpuci",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
              sh "./ci/gpu_test.sh"
            }
          })
        }
      }
    }

    stage("Nightly Test Stage") {
      when { triggeredBy 'TimerTrigger' }
      environment { UPLOAD_PKGS = "true" }
      steps {
        echo "${currentBuild.buildCauses}"
        script {
          parallel generateStage("nightly_test", {
            sh "./ci/gpu_test.sh"
          })
        }
      }
    }
  }
}
