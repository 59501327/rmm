@Library('gpuci_shared_lib') _

pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '1')) 
    ansiColor('xterm')
  }
  stages {
    stage("Build Stage") { 
      steps {
        sh "env"
        echo "${currentBuild.buildCauses}"
      }
    }
    stage("C++ Matrix Build") {
      environment {
        buildCudaVarName = '1'
        BUILD_TYPE = 'cpu'
        BUILD_MODE = 'pull-request'
        REPO = "rmm"
        PARALLEL_LEVEL = '4'
        CUDA="11.5"
      }
      steps {
        sh "echo starting C++ matrix builds"
        sh 'printenv'

        script {
          parallel generateStage("cuda_build", {
            checkout scm

            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "aws-s3-gpuci",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
              sh '''#!/bin/bash
                chmod +x ./ci/build_cpp.sh
                ./ci/build_cpp.sh
              '''
            }

            echo "Hello CUDA!"
          })
        }
      }
    }

    stage("Python Matrix Build") {
      environment {
        CUDA="11.5"
      }
      steps {
        script {
          parallel generateStage("python_build", {
            cleanWs (
              deleteDirs: true,
              externalDelete: 'sudo rm -rf %s'
            )
            checkout scm

            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "aws-s3-gpuci",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {
              sh '''#!/bin/bash
                chmod +x ./ci/build_py.sh
                ./ci/build_py.sh
              '''
            }
            echo "Hello Python!"
          })
        }
      }
    }

    stage("PR/Branch Test Stage") {
      when { not { triggeredBy 'TimerTrigger' } }
      environment {
        CUDA="11.5"
        UPLOAD_PKGS = """${sh(
              returnStdout: true,
              script: 'echo "$GIT_BRANCH" | grep -iq "pr" && echo "false" || echo "true"'
          )}"""
      }
      steps {
        sh "env"
        echo "${currentBuild.buildCauses}"
        script {
          parallel generateStage("branch_pr_test",{
            cleanWs (
              deleteDirs: true,
              externalDelete: 'sudo rm -rf %s'
            )
            checkout scm
            withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                credentialsId: "aws-s3-gpuci",
                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
            ]]) {    
              echo "hello from rmm repo"
              echo "Upload packages: \${UPLOAD_PKGS}"
              sh '''#!/bin/bash
                source ci/gpu_test.sh
              '''         
            }
          })
        }
      }
    }

    stage("Nightly Test Stage") {
      when { triggeredBy 'TimerTrigger' }
      environment { UPLOAD_PKGS = "true" }
      steps {
        sh "env"
        echo "${currentBuild.buildCauses}"
        script {
          parallel generateStage("nightly_test", {
            cleanWs (
              deleteDirs: true,
              externalDelete: 'sudo rm -rf %s'
            )
            checkout scm
            echo "Upload packages: \${UPLOAD_PKGS}"
            echo "Uploading packages..."
          })
        }
      }
    }
  }
}