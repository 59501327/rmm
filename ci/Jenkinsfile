@Library('gpuci_shared_lib') _

pipeline {
  agent any
  stages {
    stage("Build Stage") {
      steps {
        sh "env"
        echo "${currentBuild.buildCauses}"
      }
    }
    stage("C++ Matrix Build") {
      matrix {
        agent {
          docker {
            image getArcImage("${ARC}")
            label "cpu4-${ARC}"
          }
        }

        axes {
          axis {
            name 'ARC'
            values 'arm64', 'amd64'
          }
        }

        stages {
          stage ('C++ Build') {
            steps {
              echo "Do Build for ${ARC}"
            }
          }
        }      
      }
    }

    stage("Python Matrix Build") {
      matrix {
        agent {
          label 'cpu'
        }

        axes {
          axis {
            name 'ARC'
            values 'arm64', 'amd64'
          }

          axis {
            name 'PYTHON_VER'
            values '3.8', '3.9'
          }
        }

        stages {
          stage('Python Build') {
            steps {
              echo "Do Build for arc:${ARC} and py_ver:${PYTHON_VER}"
            }
          }
        }
      }
    }

    stage("PR/Branch Test Stage") {
      when { not { triggeredBy 'TimerTrigger' } }
      environment {
          UPLOAD_PKGS = """${sh(
                returnStdout: true,
                script: 'echo "$GIT_BRANCH" | grep -iq "pr" && echo "false" || echo "true"'
            )}"""
      }
      steps {
        sh "env"
        echo "${currentBuild.buildCauses}"
        script {
          parallel getTestStages({
            echo "hello from rmm repo"
            echo "Upload packages: \${UPLOAD_PKGS}"
          })
        }
      }
    }

    stage("Nightly Test Stage") {
      when { triggeredBy 'TimerTrigger' }
      environment { UPLOAD_PKGS = "true" }
      steps {
        sh "env"
        echo "${currentBuild.buildCauses}"
        script {
          parallel getTestStages({
            echo "Upload packages: \${UPLOAD_PKGS}"
            echo "Uploading packages..."
          })
        }
      }
    }
  }
}